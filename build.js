//依赖全局插件async uglifyjs
// Generated by CoffeeScript 1.8.0
(function() {
  var CleanCSS, allDebugHtml, async, defautcss, defautjs, exec, fs, isdebug, minAllCss, minAllJs, path, version, workpath;

  workpath = ".";

  defautjs = "js/o.js";

  defautcss = "css/o.css";

  version = (new Date()).getTime();

  isdebug = !!process.argv[2];

  fs = require('fs');

  path = require('path');

  async = require('async');

  exec = require('child_process').exec;

  CleanCSS = require("clean-css");

  minAllJs = function(html, callback) {
    var cmds;
    cmds = [];

    html = html.replace(/<!--\[js([^\]]*?)\]-->([\s\S]+?)<!--\[end\s+js\]-->/gm, function(item, param, content) {
      var cache, outfile, _ref;
      outfile = ((_ref = param.match(/\s*out=(\S+)/)) != null ? _ref[1] : void 0) || defautjs;
      cache = [];
      content.replace(/<script\s+src="([^"]+?)"><\/script>/g, function(scr, file) {
        cmds.push(function(callback) {
          console.log(file);
          return exec("uglifyjs " + (path.resolve(path.join(workpath, file))) + " -c -m", function(err, stdout, stderr) {
            if (!isdebug && /common.js$/.test(file)||!isdebug && /risk.js$/.test(file)) {
              stdout = stdout.replace(/var debug=!0/, "var debug=0");
            }
            cache.push(stdout);
            return callback(err);
          });
        });
        return "";
      });
      cmds.push(function(callback) {
        fs.writeFileSync(path.resolve(path.join(workpath, outfile)), cache.join("\r", 'utf8'));
        return callback(null);
      });
      return "<script src=\"" + outfile + "?" + version + "\"></script>";
    });
    return async.waterfall(cmds, function(err) {
      return callback(err, html);
    });
  };

  minAllCss = function(html, callback) {
    var cmds;
    cmds = [];
    html = html.replace(/<!--\[css([^\]]*?)\]-->([\s\S]+?)<!--\[end\s+css\]-->/gm, function(item, param, content) {
      var cache, outfile, _ref;
      outfile = ((_ref = param.match(/\s*out=(\S+)/)) != null ? _ref[1] : void 0) || defautcss;
      cache = [];
      content.replace(/<link[^>]+?href="([^"]+?)"[^>]*?\/>/g, function(scr, file) {
        cmds.push(function(callback) {
          console.log(file);
          return fs.readFile(path.resolve(path.join(workpath, file)), function(err, stream) {
            var minified;
            minified = new CleanCSS({
              keepSpecialComments: 0
            }).minify(stream.toString()).styles;
            cache.push(minified);
            return callback(err);
          });
        });
        return "";
      });
      cmds.push(function(callback) {
        fs.writeFileSync(path.resolve(path.join(workpath, outfile)), cache.join("\r", 'utf8'));
        return callback(null);
      });
      return "<link rel=\"stylesheet\" type=\"text/css\" href=\"" + outfile + "?" + version + "\"/>";
    });
    return async.waterfall(cmds, function(err) {
      return callback(err, html);
    });
  };

  allDebugHtml = function(cpath, callback) {
    var cmds;
    cmds = [];
    fs.readdirSync(cpath).forEach(function(item) {
      if (/\-debug\.html$/.test(item)) {
        return cmds.push(function(callback) {
          var filepath;
          console.log(item);
          filepath = path.join(cpath, item);
          return async.waterfall([
            function(callback) {
              return fs.readFile(filepath, function(err, html) {
                return callback(err, html.toString());
              });
            }, minAllCss, minAllJs, function(html, callback) {
              fs.writeFileSync(path.resolve(path.join(workpath, item.replace(/-debug/, ''))), html, 'utf8');
              return callback(null);
            }
          ], callback);
        });
      }
    });
    return async.waterfall(cmds, callback);
  };

  allDebugHtml(path.resolve(workpath), function(err, result) {
    return console.log("All done!");
  });

}).call(this);
